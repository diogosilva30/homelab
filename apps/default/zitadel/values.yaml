# Default values for zitadel.
zitadel:
  # The ZITADEL config under configmapConfig is written to a Kubernetes ConfigMap
  # See all defaults here:
  # https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
  configmapConfig:
    ExternalSecure: false
    # Externally facing domain
    ExternalDomain: idp.lab.local
    TLS:
      Enabled: false

    FirstInstance:
      Org:
        Name: LAB
        Human:
          # # Login with "dsilva@lab.idp.lab.local"
          FirstName: Diogo
          LastName: Silva
          Nickname: dsilva
          Username: dsilva
          Password: AdminChangeMe1!
        # Create machine key for programatic access in Terraform
        # From: https://github.com/telia-oss/team-alliance-zitadel-charts/blob/main/examples/6-machine-user/zitadel-values.yaml
        Machine:
          Machine:
            Username: zitadel-admin-sa
            Name: Admin
          MachineKey:
            ExpirationDate: "2026-01-01T00:00:00Z"
            # Type: 1 means JSON. This is currently the only supported machine key type.
            Type: 1
        # PAT:
        #   ExpirationDate: "2026-01-01T00:00:00Z"

  # ZITADEL uses the masterkey for symmetric encryption.
  # You can generate it for example with tr -dc A-Za-z0-9 </dev/urandom | head -c 32
  masterkeySecretName: "zitadel-master-key" # The secret we created in "manifests.zitadel-master-key.yaml" file

  # Enabling this will create a debug pod that can be used to inspect the ZITADEL configuration and run zitadel commands using the zitadel binary.
  # This is useful for debugging and troubleshooting.
  # After the debug pod is created, you can open a shell within the pod.
  # See more instructions by printing the pods logs using kubectl logs [pod name].
  debug:
    enabled: true
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "1"

replicaCount: 3

image:
  repository: ghcr.io/zitadel/zitadel
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Additional environment variables
env:
  - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE
    value: "disable"
  - name: ZITADEL_DATABASE_POSTGRES_HOST
    value: zitadel-db-rw.postgresql.svc.cluster.local
  - name: ZITADEL_DATABASE_POSTGRES_PORT
    value: "5432"
  - name: ZITADEL_DATABASE_POSTGRES_DATABASE
    value: zitadel
  - name: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
    valueFrom:
      secretKeyRef:
        name: zitadel-postgres-credentials
        key: username
  - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
    valueFrom:
      secretKeyRef:
        name: zitadel-postgres-credentials
        key: password
  - name: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
    valueFrom:
      secretKeyRef:
        name: zitadel-postgres-admin-credentials
        key: username
  - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
    valueFrom:
      secretKeyRef:
        name: zitadel-postgres-admin-credentials
        key: password
  - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE
    value: "disable"

initJob:
  # Once ZITADEL is installed, the initJob can be disabled.
  enabled: true
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "1"
    #argocd.argoproj.io/hook: Sync

setupJob:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "2"
    #argocd.argoproj.io/hook: Sync

metrics:
  enabled: true
  serviceMonitor:
    # If true, the chart creates a ServiceMonitor that is compatible with Prometheus Operator
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.ServiceMonitor.
    # The Prometheus community Helm chart installs this operator
    # https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#kube-prometheus-stack
    enabled: true
    honorLabels: false
    honorTimestamps: true
